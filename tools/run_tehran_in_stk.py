"""Automate STK 11.2 playback of the Tehran daily pass export package.

This utility connects to a local STK 11.2 installation via the COM interface,
loads the scenario generated by ``sim.scripts.run_scenario``, ensures that the
ground-track and facility overlays are visible, and runs a single-orbit
animation pass. The script is intended for analyst workstations running
Windows; it does not execute within the repository's Linux-based CI pipeline.

Example
-------
>>> python tools/run_tehran_in_stk.py run_20260321_0931Z/stk_export --show-ui
"""

from __future__ import annotations

import argparse
from pathlib import Path
from typing import Sequence


def _connect_to_stk(show_ui: bool):
    """Return the STK application and root objects, creating an instance if required."""

    try:
        import comtypes.client  # type: ignore
    except ImportError as exc:  # pragma: no cover - executed only in STK environment
        raise RuntimeError(
            "The comtypes package is required to automate STK; install it via 'pip install comtypes' on the STK host."
        ) from exc

    try:
        app = comtypes.client.GetActiveObject("STK11.Application")  # type: ignore[attr-defined]
    except OSError:  # pragma: no cover - depends on local STK state
        app = comtypes.client.CreateObject("STK11.Application")  # type: ignore[attr-defined]

    if show_ui:
        app.Visible = True  # type: ignore[attr-defined]
        app.UserControl = True  # type: ignore[attr-defined]

    root = app.Personality2  # type: ignore[attr-defined]
    return app, root


def _load_scenario(root, scenario_path: Path):
    """Load the exported scenario into STK and return the root Scenario object."""

    if not scenario_path.exists():
        raise FileNotFoundError(f"Scenario file '{scenario_path}' was not found.")

    root.LoadScenario(str(scenario_path))  # type: ignore[attr-defined]
    return root.CurrentScenario  # type: ignore[attr-defined]


def _configure_visualisation(root, satellite_name: str) -> None:
    """Create default map and 3D views, enable ground-tracks, and focus on Tehran."""

    root.ExecuteCommand("VO * NewWindow 3D")  # type: ignore[attr-defined]
    root.ExecuteCommand("VO * NewWindow Map")  # type: ignore[attr-defined]
    root.ExecuteCommand(
        f"VO * MapID Map1 GroundTrack Add Satellite/{satellite_name} Show On"
    )  # type: ignore[attr-defined]
    root.ExecuteCommand(
        f"VO * MapID Map1 Facility Add Facility/Tehran_Urban_Core Show On"
    )  # type: ignore[attr-defined]
    root.ExecuteCommand(
        f"VO * MapID Map1 Facility Add Facility/Svalbard Show On"
    )  # type: ignore[attr-defined]
    root.ExecuteCommand("VO * ViewFromTo From Earth To Facility/Tehran_Urban_Core")  # type: ignore[attr-defined]


def _play_animation(root) -> None:
    """Reset and play the scenario animation for one orbital period."""

    root.ExecuteCommand("Animate */Reset")  # type: ignore[attr-defined]
    root.ExecuteCommand("Animate */Start")  # type: ignore[attr-defined]


def parse_args(args: Sequence[str] | None = None) -> argparse.Namespace:
    """Return parsed command-line arguments."""

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "export_directory",
        type=Path,
        help="Path to the run directory containing the 'stk_export' artefacts.",
    )
    parser.add_argument(
        "--show-ui",
        action="store_true",
        help="Ensure the STK window is visible and under user control.",
    )
    return parser.parse_args(args)


def main(args: Sequence[str] | None = None) -> int:
    """Entry point for executing the STK automation."""

    namespace = parse_args(args)
    export_dir = namespace.export_directory.resolve()
    scenario_file = export_dir / "stk_export" / "Tehran_Daily_Pass.sc"

    _, root = _connect_to_stk(namespace.show_ui)
    scenario = _load_scenario(root, scenario_file)

    satellite_name = "tehran_daily_pass_spacecraft"
    _configure_visualisation(root, satellite_name)
    _play_animation(root)

    print(
        "Loaded Tehran daily pass scenario into STK."
        " Verify geometry, capture evidence, and archive outputs per the validation guide."
    )
    print(f"Scenario title: {scenario.InstanceName}")  # type: ignore[attr-defined]
    return 0


if __name__ == "__main__":  # pragma: no cover - manual execution only
    raise SystemExit(main())
